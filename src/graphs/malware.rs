use std::collections::HashSet;
use std::error::Error;
use std::path::{Path, PathBuf};

use plotters::prelude::*;

use crate::parser::NessusReport;
use crate::template::malware_helper::has_malware_finding;

/// Generate a pie chart showing infected versus non-infected hosts.
/// Returns the path to the generated PNG file.
pub fn malware(report: &NessusReport, dir: &Path) -> Result<PathBuf, Box<dyn Error>> {
    let total_hosts = report.hosts.len();
    if total_hosts == 0 {
        return Err("no host data".into());
    }

    let mut infected: HashSet<u32> = HashSet::new();
    for item in &report.items {
        if let (Some(pid), Some(hid)) = (item.plugin_id, item.host_id) {
            if has_malware_finding(pid) {
                infected.insert(hid as u32);
            }
        }
    }
    let infected_count = infected.len();
    let clean_count = total_hosts.saturating_sub(infected_count);

    let file = dir.join("malware.png");
    let tmp = file.clone();
    let root = BitMapBackend::new(&tmp, (640, 480)).into_drawing_area();
    root.fill(&WHITE)?;

    let dims = root.dim_in_pixel();
    let center = (dims.0 as i32 / 2, dims.1 as i32 / 2);
    let radius = (dims.0.min(dims.1) as f64) * 0.4;

    let sizes = vec![infected_count as f64, clean_count as f64];
    let mut colors = Vec::new();
    for i in 0..2 {
        let (r, g, b) = Palette99::pick(i).rgb();
        colors.push(RGBColor(r, g, b));
    }
    let labels = vec!["Infected", "Not Infected"];
    let label_refs: Vec<&str> = labels.iter().copied().collect();

    let mut pie = Pie::new(&center, &radius, &sizes, &colors, &label_refs);
    pie.label_style(("sans-serif", 15).into_font());
    pie.percentages(("sans-serif", 12).into_font());
    root.draw(&pie)?;
    root.present()?;
    drop(root);
    Ok(file)
}

#[cfg(test)]
mod tests {
    use super::*;
    use crate::models::{Host, Item, Report};
    use tempfile::tempdir;

    fn report() -> NessusReport {
        NessusReport {
            report: Report::default(),
            version: "1".into(),
            hosts: vec![
                Host {
                    id: 0,
                    nessus_report_id: None,
                    name: Some("h1".into()),
                    os: None,
                    mac: None,
                    start: None,
                    end: None,
                    ip: None,
                    fqdn: None,
                    netbios: None,
                    notes: None,
                    risk_score: None,
                    user_id: None,
                    engagement_id: None,
                },
                Host {
                    id: 1,
                    nessus_report_id: None,
                    name: Some("h2".into()),
                    os: None,
                    mac: None,
                    start: None,
                    end: None,
                    ip: None,
                    fqdn: None,
                    netbios: None,
                    notes: None,
                    risk_score: None,
                    user_id: None,
                    engagement_id: None,
                },
            ],
            items: vec![Item { id: 1, host_id: Some(0), plugin_id: Some(34221), ..Item::default() }],
            plugins: Vec::new(),
            patches: Vec::new(),
            attachments: Vec::new(),
            host_properties: Vec::new(),
            service_descriptions: Vec::new(),
            references: Vec::new(),
            policies: Vec::new(),
            policy_plugins: Vec::new(),
            family_selections: Vec::new(),
            plugin_preferences: Vec::new(),
            server_preferences: Vec::new(),
            filters: Default::default(),
        }
    }

    #[test]
    fn creates_chart() {
        let r = report();
        let dir = tempdir().unwrap();
        let path = malware(&r, dir.path()).unwrap();
        assert!(std::fs::metadata(path).is_ok());
    }
}

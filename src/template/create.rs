use std::fs;
use std::io::{self, Write};
use std::path::Path;

use crate::error::Error;

/// Prompt for a value if not provided via CLI flag.
pub fn prompt(message: &str) -> Result<String, Error> {
    print!("{message}: ");
    io::stdout().flush()?;
    let mut input = String::new();
    io::stdin().read_line(&mut input)?;
    Ok(input.trim().to_string())
}

/// Generate a template skeleton source file under the `templates/` directory.
pub fn scaffold(name: &str, author: &str, renderer: &str) -> Result<(), Error> {
    let dir = Path::new("templates");
    fs::create_dir_all(dir)?;
    let file_path = dir.join(format!("{name}.rs"));
    let contents = format!(
        "use std::collections::HashMap;\nuse std::error::Error;\nuse risu_rs::parser::NessusReport;\nuse risu_rs::renderer::Renderer;\nuse risu_rs::template::Template;\n\n/// Template generated by risu-rs.\n/// Author: {author}\n/// Renderer: {renderer}\npub struct {struct_name};\n\nimpl Template for {struct_name} {{\n    fn name(&self) -> &str {{\n        \"{name}\"\n    }}\n\n    fn generate(&self, _report: &NessusReport, renderer: &mut dyn Renderer, _args: &HashMap<String, String>) -> Result<(), Box<dyn Error>> {{\n        renderer.text(\"TODO\")?;\n        Ok(())\n    }}\n}}\n\n/// Metadata about this template.\npub struct Metadata {{\n    pub name: &'static str,\n    pub author: &'static str,\n    pub renderer: &'static str,\n}}\n\npub static METADATA: Metadata = Metadata {{\n    name: \"{name}\",\n    author: \"{author}\",\n    renderer: \"{renderer}\",\n}};\n\n#[no_mangle]\npub extern \"C\" fn create_template() -> Box<dyn Template> {{\n    Box::new({struct_name})\n}}\n",
        author = author,
        renderer = renderer,
        name = name,
        struct_name = to_camel_case(name),
    );
    fs::write(&file_path, contents)?;
    println!("Created template at {}", file_path.display());
    Ok(())
}

fn to_camel_case(name: &str) -> String {
    name.split('_')
        .map(|part| {
            let mut chars = part.chars();
            match chars.next() {
                Some(first) => first.to_uppercase().collect::<String>() + chars.as_str(),
                None => String::new(),
            }
        })
        .collect()
}

use std::collections::{HashMap, HashSet};
use std::error::Error;

use crate::parser::NessusReport;
use crate::renderer::Renderer;
use crate::template::Template;
use crate::template::template_helper::{graph, malware};

/// Port of the legacy Ruby `malware.rb` template.
pub struct MalwareTemplate;

impl Template for MalwareTemplate {
    fn name(&self) -> &str {
        "malware"
    }

    fn generate(
        &self,
        report: &NessusReport,
        renderer: &mut dyn Renderer,
        _args: &HashMap<String, String>,
    ) -> Result<(), Box<dyn Error>> {
        renderer.heading(1, "Malware Report")?;

        // Embed infection graph
        let tmp = std::env::temp_dir();
        if let Ok(uri) = graph::malware_data_uri(report, &tmp) {
            renderer.heading(2, "Infected vs. Non-Infected Hosts")?;
            renderer.image_data_uri(&uri)?;
        }

        // Build list of Conficker infected hosts
        let mut infected_hosts: HashSet<String> = HashSet::new();
        for item in &report.items {
            if let (Some(pid), Some(hid)) = (item.plugin_id, item.host_id) {
                if malware::CONFICKER_PLUGIN_IDS.contains(&pid) {
                    if let Some(host) = report.hosts.get(hid as usize) {
                        let name = host
                            .name
                            .clone()
                            .or(host.fqdn.clone())
                            .or(host.ip.clone())
                            .unwrap_or_else(|| "unknown".into());
                        infected_hosts.insert(name);
                    }
                }
            }
        }
        let conf_hosts: Vec<&str> = infected_hosts.iter().map(|s| s.as_str()).collect();
        renderer.text(&malware::conficker_section(&conf_hosts))?;
        Ok(())
    }
}

/// Metadata about this template.
pub struct Metadata {
    pub name: &'static str,
    pub author: &'static str,
    pub renderer: &'static str,
}

pub static METADATA: Metadata = Metadata {
    name: "malware",
    author: "ported",
    renderer: "text",
};
